name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
        include:
          - build_type: Release
            cmake_build_type: Release
          - build_type: Debug
            cmake_build_type: Debug

    env:
      LLVM_BUILD_DIR: ${{ github.workspace }}/llvm-build
      CMAKE_BUILD_TYPE: ${{ matrix.cmake_build_type }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 3
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build build-essential git libgmp-dev ccache

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.build_type }}-

      - name: Cache LLVM build
        uses: actions/cache@v4
        with:
          path: ${{ env.LLVM_BUILD_DIR }}
          key: ${{ runner.os }}-llvm-build-${{ matrix.build_type }}-${{ hashFiles('third_party/llvm-project/**') }}
          restore-keys: |
            ${{ runner.os }}-llvm-build-${{ matrix.build_type }}-
        id: cache-llvm

      - name: Build LLVM/Clang/MLIR
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          bash scripts/llvm-build.sh "$LLVM_BUILD_DIR"
        env:
          CCACHE_DIR: ~/.ccache
          LLVM_BUILD_DIR: ${{ env.LLVM_BUILD_DIR }}

      - name: Build AutoPoly
        run: |
          bash scripts/build.sh "$LLVM_BUILD_DIR" 2>&1 | tee build_autopoly.log
        env:
          CCACHE_DIR: ~/.ccache
          LLVM_BUILD_DIR: ${{ env.LLVM_BUILD_DIR }}

      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build_autopoly_log-${{ matrix.build_type }}
          path: build_autopoly.log

      - name: Test AutoPoly binary exists
        run: |
          test -f build/bin/autopoly-c-opt
          test -f build/bin/autopoly-mlir-opt

      - name: Show build output
        run: |
          echo "Build type: ${{ matrix.build_type }}"
          echo "Build directory contents:"
          ls -lh build/bin/
          echo "CCache statistics:"
          ccache -s